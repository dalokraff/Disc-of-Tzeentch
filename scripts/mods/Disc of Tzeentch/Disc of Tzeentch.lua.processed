--mod:dofile("scripts/mods/Disc of Tzeentch/utils/disc_buff")
local mod = get_mod("Disc of Tzeentch")
mod:dofile("scripts/mods/Disc of Tzeentch/hooks")
mod:dofile("scripts/mods/Disc of Tzeentch/utils/unit")
mod:dofile("scripts/mods/Disc of Tzeentch/utils/strManip")
mod:dofile("scripts/mods/Disc of Tzeentch/utils/InputHandler")
mod:dofile("scripts/mods/Disc of Tzeentch/utils/mod_rpcs")
mod:dofile("scripts/mods/Disc of Tzeentch/utils/network_tables")

-- Your mod code goes here.
-- https://vmf-docs.verminti.de

--directional states when on disc
mod.down = false
mod.up = true
mod.left = false
mod.richt = false
mod.forward = false
mod.backward = false

mod.ascend = function()
    mod.up = not mod.up
end

mod.descend = function()
    mod.down = not mod.down
end

--table for keepign track of disc-rider pairs
mod.mounted_players = {}
mod.mount_velocity = {}

mod.player_hot_join = false

Managers.package:load("resource_packages/levels/dlcs/morris/tzeentch_common", "global")

math.randomseed(1)

function mod.update()
    if mod.mounted_players[1] ~= nil then
        local world = Managers.world:world("level_world")
        mod.handle_inputs()
        mod.drag_unit(world)
    end

    --checks for when a player hot joins and then preps the unit_pos_list needed to be sent for snyc disc loactions with an rpc
    if  mod.player_hot_join then
        --mod:echo('hallo')
        local world = Managers.world:world("level_world")
        if Managers.player:local_player().is_server then
            local list_of_mounts_in_world = World.units_by_resource(world, "units/disc_tzeentch/disc")
            --mod:echo(list_of_mounts_in_world)
            for k,v in pairs(list_of_mounts_in_world) do 
                --mod:echo(k)
                --mod:echo(v)
            end
            local unit_pos_list = {}
            for _,v in pairs(list_of_mounts_in_world) do
                --mod:echo(v)
                if Unit.get_data(v, "current_rider") == "no_one" then 
                    --mod:echo('it')
                    local unitPos = Unit.local_position(v, 0)
                    local unitRot = Unit.local_rotation(v, 0)
                    local Xx,Yy,Zz,Ww = Quaternion.to_elements(unitRot)
                    local unit_marker = tostring(Unit.get_data(v, "unit_marker"))--marker
                    unit_pos_list[unit_marker] = {
                        x = unitPos.x,
                        y = unitPos.y,
                        z = unitPos.z,
                        x1 = Xx,
                        y1 = Yy,
                        z1 = Zz,
                        w1 = Ww,
                        unit_marker = Unit.get_data(v, "unit_marker")
                    }
                    --mod:echo("pos unit list in")
                else 
                    --mod:echo('that')
                    for _,j in pairs(mod.mounted_players) do
                        --if Unit.get_data(v, "current_rider") == j.rider then
                            local unitPos = Unit.local_position(v, 0)
                            local unitRot = Unit.local_rotation(v, 0)
                            local Xx,Yy,Zz,Ww = Quaternion.to_elements(unitRot)
                            local unit_marker = Unit.get_data(v, "unit_marker")
                            unit_pos_list[j.rider] = {
                                x = unitPos.x,
                                y = unitPos.y,
                                z = unitPos.z,
                                x1 = Xx,
                                y1 = Yy,
                                z1 = Zz,
                                w1 = Ww,
                                unit_marker = Unit.get_data(v, "unit_marker")
                            }
                        --end
                    end
                end
            end
            --mod:echo('mit')
            if mod.mounted_players[1] == nil then
                local empty_tab = {
                    empty = {
                        empty = "empty"
                    }
                }
                mod:network_send("rpc_snyc_mounts","others", empty_tab, unit_pos_list)
                for k,v in pairs(unit_pos_list) do 
                    --mod:echo(k)
                    for i,j in pairs(v) do 
                        --mod:echo(i)
                        --mod:echo(j)
                    end
                end
                --mod:echo('empty')
            else
                mod:network_send("rpc_snyc_mounts","others", mod.mounted_players, unit_pos_list)
                --mod:echo('full')
            end
            for k,v in pairs(unit_pos_list) do 
                --mod:echo(k)
                --mod:echo(v)
            end
            mod.player_hot_join = false
            --mod:echo('tschuss')
        end
    end

end

--defines the custom buff that is applied while riding the disc
local test_buff_templates = {
	disc_buff = {
		buffs = {
			{
				max_stacks = 1,
                remove_buff_func = "remove_movement_buff",
				apply_buff_func = "apply_movement_buff",
				icon = "victor_zealot_passive_move_speed",
                refresh_durations = true,
				multiplier = 2,
                path_to_movement_setting_to_modify = {
                    "move_speed"
                }
			}
		}
	}
}
BuffTemplates["disc_buff"] = test_buff_templates.disc_buff
BuffUtils.copy_talent_buff_names(test_buff_templates)

function mod.spawn_network_package()
    local player = Managers.player:local_player()
    local player_unit = player.player_unit
    local position = Unit.local_position(player_unit, 0) + Vector3(0, 0, 1)
    local rotation = Unit.local_rotation(player_unit, 0)
    local posList = { position.x, position.y, position.z }
    local x,y,z,w = Quaternion.to_elements(rotation)
    local rotList = { x,y,z,w }
    local unit_marker = math.random(10000)
    --in lieu of using a proper go_id each disc unit is given a unit_marker
    mod:network_send("rpc_spawn_mount","all", posList, rotList, unit_marker)
    
    --mod:echo('++++')
    for k,v in pairs(Managers.player._players_by_peer) do
        --mod:echo(k)
        --mod:echo(v)
    end
    --mod:echo('++++')
    --mod:echo(player:network_id())
end

mod:command("disc_net", "", function() 
    mod.spawn_network_package()
    --mod:echo('spawned')
end)


-- mod:command("lvl_name", "", function() 
--     --Managers.state.game_mode:start_specific_level("sig_volcano_tzeentch_path1")
--     --sig_mordrek_nurgle_path2
--     Managers.state.game_mode:start_specific_level("sig_mordrek_slaanesh_path2")
--     --mod:echo('start')
--     ----mod:echo(Managers.level_transition_handler:get_current_level_keys())
--     --738873715
--     --873bfbd3b271fa47
-- end)


--adds the 
SpawnUnitTemplates = SpawnUnitTemplates or {}
SpawnUnitTemplates.disc_unit = {
    spawn_func = function (source_unit, position, rotation)
        local package_name = "units/disc_tzeentch/disc"
        local unit_template_name = "interaction_unit"
        local extension_init_data = {}
        local material = "units/props/tzeentch/tzeentch_faction_01"
        local unit_spawner = Managers.state.unit_spawner

        local unit, go_id = unit_spawner:spawn_network_unit(package_name, unit_template_name, extension_init_data, position, rotation)
        Unit.set_material(unit, "disc", material)
        --mod:echo(Managers.state.unit_storage:go_id(unit))
        --mod:echo('test')
        --mod:echo(go_id)
        
    end
}

--this defines the custom interaction that is called when interacting with the disc
InteractionHelper = InteractionHelper or {}
InteractionHelper.interactions.mount_interaction = {}
for _, config_table in pairs(InteractionHelper.interactions) do
	config_table.request_rpc = config_table.request_rpc or "rpc_generic_interaction_request"
end

InteractionDefinitions["mount_interaction"] = InteractionDefinitions.mount_interaction or table.clone(InteractionDefinitions.smartobject)
InteractionDefinitions.mount_interaction.config.swap_to_3p = false
InteractionDefinitions.mount_interaction.config.request_rpc = "rpc_generic_interaction_request" --"rpc_request_spawn_network_unit"

InteractionDefinitions.mount_interaction.server.stop = function (world, interactor_unit, interactable_unit, data, config, t, result)
    if result == InteractionResult.SUCCESS then
        local interactable_system = ScriptUnit.extension(interactable_unit, "interactable_system")
        interactable_system.num_times_successfully_completed = interactable_system.num_times_successfully_completed + 1

    end
end

InteractionDefinitions.mount_interaction.client.can_interact = function (interactor_unit, interactable_unit, data, config)
	local disc_rider = Unit.get_data(interactable_unit, "current_rider")
    local player = Managers.player:local_player()
    local potentialRider = player:network_id()
    local not_used = true
    if disc_rider == "no_one" then
        not_used = true
    elseif potentialRider ~= disc_rider
        not_used = false
    end

    return not_used
end

InteractionDefinitions.mount_interaction.server.can_interact = function (interactor_unit, interactable_unit)
	local disc_rider = Unit.get_data(interactable_unit, "current_rider")
    local player = Managers.player:local_player()
    local potentialRider = player:network_id()
    local not_used = true
    if disc_rider == "no_one" then
        not_used = true
    elseif potentialRider ~= disc_rider
        not_used = false
    end

    return not_used
end

InteractionDefinitions.mount_interaction.client.stop = function (world, interactor_unit, interactable_unit, data, config, t, result)
	data.start_time = nil

	if result == InteractionResult.SUCCESS and not data.is_husk then
	    if interactable_unit then

            local player = Managers.player:local_player()
            local currentRider = player:network_id()
            local currentMount = Unit.get_data(interactable_unit, "unit_marker")

            --determines if the buff needs to be removed from the rider
            if Unit.get_data(interactable_unit, "current_rider") == currentRider then 
                local buff_to_remove = Unit.get_data(interactable_unit, "interaction_data", "apply_buff")
                local buff_extension = ScriptUnit.extension(interactor_unit, "buff_system")
                local active_buff = buff_extension:get_non_stacking_buff(buff_to_remove)
                buff_extension:remove_buff(active_buff.id)                
            end

            --preps data to be sent over with rpc 
            local disc_pos = Unit.local_position(interactable_unit, 0)
            local zilch = Vector3.zero()
            Vector3.set_z(zilch, 0.3)
            disc_pos = disc_pos + zilch
            Unit.set_local_position(interactor_unit, 0, disc_pos)
            
            --mod:echo(Unit.get_data(interactable_unit, "current_rider"))
            if Unit.get_data(interactable_unit, "current_rider") == "no_one" then
                mod:network_send("rpc_add_rider","all", currentRider, currentMount)
            else
                mod:network_send("rpc_remove_rider","all", currentRider, currentMount)
            end
            --mod:echo(Unit.get_data(interactable_unit, "current_rider"))
        end

	end
end

InteractionDefinitions.mount_interaction.client.hud_description = function (interactable_unit, data, config, fail_reason, interactor_unit)
    return Unit.get_data(interactable_unit, "interaction_data", "interaction_type"), Unit.get_data(interactable_unit, "interaction_data", "hud_description")
end


