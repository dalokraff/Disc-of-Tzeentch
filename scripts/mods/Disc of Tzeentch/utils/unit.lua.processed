local mod = get_mod("Disc of Tzeentch")

function mod.drag_unit()
    if local_player then 
        local player_manager = Managers.player
        local local_player = player_manager:local_player()
        local viewport_name = local_player.viewport_name
        local camera_position = Managers.state.camera:camera_position(viewport_name)
        local camera_rotation = Managers.state.camera:camera_rotation(viewport_name)
        local camera_direction = Quaternion.forward(camera_rotation)

        local unit = mod.dragged_unit
        local new_position =
        camera_position + Vector3.normalize(camera_direction) *
        mod.dragged_unit_distance
        
        local player_unit = local_player.player_unit
        local player_pos = Unit.local_position(player_unit, 0)
    
        if mod.down then 
            local zilch = Vector3.zero()
            Vector3.set_z(zilch, 0.3)
            new_position = player_pos - zilch
        end 
        if mod.up then
            local zilch = Vector3.zero()
            Vector3.set_z(zilch, 0.1)
            new_position = player_pos + zilch 
            --new_position = player_pos
        elseif not mod.down then
            local zilch = Vector3.zero()
            Vector3.set_z(zilch, 0.0)
            new_position = player_pos - zilch
        end 

        local rotation = mod.dragged_rotation:unbox()
        --local rotaion =  Unit.local_rotation(player_unit, 0)
        if Unit.alive(unit)
            Unit.set_local_position(unit, 0, new_position)
            Unit.set_local_rotation(unit, 0, rotation)

            -- Force the physics to update
            Unit.disable_physics(unit)
            Unit.enable_physics(unit)
        end

        -- Prevent stale data
        mod.dragged_rotation = QuaternionBox(rotation)
    end
end

function mod.outline_unit(unit)
    local flag = "outline_unit"
    local channel = Color(255, 0, 0, 255)
    local apply_method = "unit_and_childs"
    local outline_system = Managers.state.entity:system("outline_system")
    local do_outline = true
    outline_system:outline_unit(unit, flag, channel, do_outline, apply_method)
end